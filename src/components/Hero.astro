---
import { BackgroundPicture } from "astro-imagetools/components";
import fs from "fs";

const { path, heading1, heading2 } = Astro.props;
const imageFiles =
  Astro.props.imageFiles ||
  fs.readdirSync(path).filter((file) => {
    if (!file.includes("portrait")) return /.png|.jpg|.jpeg/.test(file);
  });
---

<div class="-mx-4 max-w-screen-2xl 2xl:mx-auto relative">
  <div class="absolute bottom-8 z-10 px-4 py-2 bg-white-900/50 xl:px-8 xl:py-4">
    <div class="mx-auto container">
      {heading2 && <h1 class="text-base text-xl text-white-50 font-text m-0">{heading2}</h1>}
      <h2 class="text-5xl leading-none lg:text-6xl leading-tight text-white-50 mt-2 shadow-white">
        {heading1}
      </h2>
    </div>
  </div>

  {
    imageFiles.map((imagefile, index) => {
      return (
        <div
          class={`bg-image ${imageFiles.length > 1 && "duration-[3s]"} ${
            index !== 0 ? "absolute top-0 w-full opacity-0" : ""
          }`}
        >
          <BackgroundPicture
            src={`/${path}/${imagefile}`}
            tag="div"
            breakpoints={{ count: 12, minWidth: 320, maxWidth: 3840 }}
            loading="eager"
            format={["webp", "jpeg"]}
            sizes={(breakpoints) => {
              const maxWidth = breakpoints[breakpoints.length - 1];
              return `(min-width: ${maxWidth}px) ${maxWidth}px, 100vw`;
            }}
            attributes={{
              link: {
                fetchpriority: "high",
              },
            }}
            artDirectives={[
              {
                src: `/${path}/${imagefile.replace(".", "_portrait.")}`,
                media: "(max-aspect-ratio: 2/3)",
                breakpoints: { count: 6, minWidth: 300, maxWidth: 1400 },
              },
            ]}
          >
            <div class="h-full pt-20 pb-12 px-4">
              <div class="container mx-auto flex flex-col justify-end h-96 min-h-[70vh]" />
            </div>
          </BackgroundPicture>
        </div>
      );
    })
  }
</div>

<script>
  const images = document.querySelectorAll(".bg-image");
  if (images.length > 1) {
    let max = images.length,
      index = 0;

    function change() {
      let next = index === max - 1 ? 0 : index + 1;
      images[index].classList.toggle("opacity-0");
      images[next].classList.toggle("opacity-0");
      index = next;
    }
    setInterval(change, 5000);
  }
</script>
